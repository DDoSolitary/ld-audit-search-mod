log_level: warning
rules:
  # only the first rule with matching conditions takes effect
  - cond:
      # (optional) nix|normal|any
      rtld: nix
      # (optional) regexp matching library name
      lib: libc\.so\..*
      # (optional) regexp matching dependent library name
      # If multiple libraries depend on the same library, only the first one
      # triggering the search will be used for matching.
      # To match the main executable, use an empty string instead of its path.
      dependent_lib: .*

    # change the library file name to search
    # $n can be used to reference capture groups in cond.lib
    # rename: my_libc.so

    # The following are config sections for different types of library search
    # paths.
    # A section will only take effect when at least one path of the
    # corresponding type is search by ld.so.

    # DT_RPATH
    rpath:

    # LD_LIBRARY_PATH
    libpath:
      # ignore libraries found for now, and save the first valid library path
      # for use in "saved" entries
      save: true

    # DT_RUNPATH
    runpath:

    # ldconfig cache
    config:

    # system default directories
    default:
      # search these paths first
      prepend:
        # use a previously saved path
        - saved: libpath
        # simply search the path
        - file: /path/to/file
        # search /path/to/dir/<name>
        - dir: /path/to/dir
      # regexp filters
      # applies to paths searched by ld.so, but not those configured here in
      # the "prepend" section
      # only the first matching item takes effect
      filter:
        - include: /lib64/.*
        - exclude: .*
env:
  - cond:
      # same as rules.cond.rtld
      rtld: nix
      # (optional) regexp matching the full path to the running executable
      exe: .*
    # set/unset environment variables
    # this is done by calling libc's setenv()/unsetenv() in a DT_INIT function,
    # so it may not affect programs that reads env vars in another DT_INIT
    # function, or doesn't use libc to read env vars (e.g. Golang)
    setenv:
      # set NAME1=VALUE, replace if existing
      NAME1: VALUE
      # set NAME2=VALUE:$NAME2 if existing, otherwise set NAME1=VALUE
      NAME2:
        type: prepend
        # defaults to : if not set
        splitter: ":"
        value: VALUE
      # set NAME3=$NAME3:VALUE if existing, otherwise set NAME3=VALUE
      NAME3:
        type: append
        value: VALUE
    unsetenv:
      - NAME2
